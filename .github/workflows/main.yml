name: main_CI

# Controls when the action will run. Triggers the workflow on push to `main` branch
on:
  push:
    branches: [ main ]

jobs:
  # This workflow contains a single job called "lint_main"
  lint_main:
    name: RunLintOnMainBranch

    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Cache Node.js modules
      uses: actions/cache@v1
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-

    - name: Install dependencies for /client
      run: cd client && npm ci

    - name: Run lint for /client
      run: cd client && npm run lint

    - name: Run tests for /client
      run: cd client && npm run test

    - name: Install dependencies for /server
      run: cd server && npm ci

    - name: Run lint for /server
      run: cd server && npm run lint


  # Deploy frontend to Netlify
  deployFrontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install NodeJS
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      # Run npm install and build on our code
      - run: cd client && npm install
      - run: cd client && CI=false npm run build --if-present

      # Deploy the build to Netlify
      - name: Deploy Frontend to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=client/build --prod
          secrets: '["NETLIFY_AUTH_TOKEN", "NETLIFY_SITE_ID"]'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Deploy backend Docker container to Heroku
  deployBackend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy Backend Container to Heroku
        uses: akhileshns/heroku-deploy@v3.7.8
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "course-load-ubc"
          heroku_email: "${{secrets.HEROKU_EMAIL}}"
          usedocker: true
          appdir: "server"
